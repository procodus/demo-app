name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  goreleaser:
    name: GoReleaser (Binaries + Docker)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.3'
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=IoT data pipeline with generator, backend, and frontend
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  helm-chart:
    name: Package and Push Helm Chart
    runs-on: ubuntu-latest
    needs: goreleaser

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Chart Version: ${VERSION}"

      - name: Update Helm chart version
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Update Chart.yaml with new version and appVersion
          sed -i "s/^version:.*/version: ${VERSION}/" deployments/helm/demo-app/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" deployments/helm/demo-app/Chart.yaml

          # Update values.yaml to use the new image tag
          sed -i "s/tag: latest/tag: ${VERSION}/" deployments/helm/demo-app/values.yaml

          # Show changes
          echo "=== Chart.yaml ==="
          grep -E "^(version|appVersion):" deployments/helm/demo-app/Chart.yaml
          echo ""
          echo "=== values.yaml (image tags) ==="
          grep -A 2 "image:" deployments/helm/demo-app/values.yaml | grep "tag:"

      - name: Lint Helm chart
        run: |
          helm lint deployments/helm/demo-app

      - name: Package Helm chart
        run: |
          helm package deployments/helm/demo-app --destination .

      - name: Push Helm chart to OCI registry
        run: |
          VERSION=${{ steps.version.outputs.version }}
          CHART_FILE="demo-app-${VERSION}.tgz"

          if [ ! -f "${CHART_FILE}" ]; then
            echo "❌ Chart package not found: ${CHART_FILE}"
            exit 1
          fi

          echo "Pushing Helm chart: ${CHART_FILE}"
          helm push "${CHART_FILE}" oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts

          echo "✅ Helm chart pushed successfully"
          echo ""
          echo "To install this chart:"
          echo "  helm install demo-app oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/demo-app --version ${VERSION}"

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: demo-app-*.tgz
          retention-days: 90

      - name: Create installation instructions
        run: |
          VERSION=${{ steps.version.outputs.version }}
          cat > INSTALL_INSTRUCTIONS.md << 'EOF'
          # Installation Instructions for ${{ steps.version.outputs.tag }}

          ## Binaries

          Download pre-built binaries from the [Releases page](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}).

          ### Linux/macOS

          ```bash
          # Download (replace OS and ARCH)
          curl -L -o demo-app.tar.gz \
            https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/demo-app_${VERSION}_Linux_x86_64.tar.gz

          # Extract
          tar -xzf demo-app.tar.gz

          # Move to PATH
          sudo mv demo-app /usr/local/bin/

          # Verify
          demo-app --help
          ```

          ## Docker Images

          Pull from GitHub Container Registry:

          ```bash
          # Pull latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Pull specific version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}

          # Run generator
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} generator --help

          # Run backend
          docker run --rm -p 50051:50051 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} backend

          # Run frontend
          docker run --rm -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} frontend
          ```

          ## Helm Chart

          Install from OCI registry:

          ```bash
          # Login to registry (if private)
          echo $GITHUB_TOKEN | helm registry login ${{ env.REGISTRY }} -u USERNAME --password-stdin

          # Install chart
          helm install demo-app \
            oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/demo-app \
            --version ${VERSION} \
            --namespace demo-app \
            --create-namespace

          # Upgrade existing installation
          helm upgrade demo-app \
            oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/demo-app \
            --version ${VERSION} \
            --namespace demo-app

          # With custom values
          helm install demo-app \
            oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/demo-app \
            --version ${VERSION} \
            --namespace demo-app \
            --create-namespace \
            --set generator.replicaCount=3 \
            --set metrics.enabled=true
          ```

          ### Chart Configuration

          See [Helm Chart README](https://github.com/${{ github.repository }}/blob/${{ steps.version.outputs.tag }}/deployments/helm/demo-app/README.md) for full configuration options.

          ## Kubernetes Deployment

          ### Quick Start

          ```bash
          # Create namespace
          kubectl create namespace demo-app

          # Install with Helm
          helm install demo-app \
            oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/demo-app \
            --version ${VERSION} \
            --namespace demo-app \
            --set global.imageRegistry=${{ env.REGISTRY }} \
            --set generator.image.repository=${{ env.IMAGE_NAME }} \
            --set generator.image.tag=${VERSION} \
            --set backend.image.repository=${{ env.IMAGE_NAME }} \
            --set backend.image.tag=${VERSION} \
            --set frontend.image.repository=${{ env.IMAGE_NAME }} \
            --set frontend.image.tag=${VERSION}

          # Check deployment
          kubectl get pods -n demo-app

          # Access frontend
          kubectl port-forward -n demo-app svc/demo-app-frontend 8080:8080
          ```

          ## Image Platforms

          Multi-architecture images are available for:
          - `linux/amd64` - x86_64
          - `linux/arm64` - ARM64 (e.g., AWS Graviton, Raspberry Pi)

          Docker will automatically pull the correct image for your platform.

          ## Verification

          ```bash
          # Verify binary checksum
          curl -L -o checksums.txt \
            https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/checksums.txt
          sha256sum -c checksums.txt --ignore-missing

          # Verify Docker image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
          docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}

          # Verify Helm chart
          helm show chart oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/demo-app --version ${VERSION}
          ```

          ## Support

          - **Issues**: https://github.com/${{ github.repository }}/issues
          - **Documentation**: https://github.com/${{ github.repository }}/blob/${{ steps.version.outputs.tag }}/README.md
          - **Changelog**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}
          EOF

          cat INSTALL_INSTRUCTIONS.md

      - name: Upload installation instructions
        uses: actions/upload-artifact@v4
        with:
          name: installation-instructions
          path: INSTALL_INSTRUCTIONS.md
          retention-days: 90

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [goreleaser, helm-chart]
    if: always()

    steps:
      - name: Check job status
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- GoReleaser: ${{ needs.goreleaser.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Helm Chart: ${{ needs.helm-chart.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.goreleaser.result }}" == "success" ]] && \
             [[ "${{ needs.helm-chart.result }}" == "success" ]]; then
            echo "✅ **All release jobs completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Artifacts Published" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 Binaries: [GitHub Releases](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
            echo "- 🐳 Docker Images: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- ⎈ Helm Chart: \`oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/demo-app\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **One or more release jobs failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
