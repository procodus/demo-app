// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: api/proto/sensor.proto

package iot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IoTService_GetAllDevice_FullMethodName               = "/iot.IoTService/GetAllDevice"
	IoTService_GetDevice_FullMethodName                  = "/iot.IoTService/GetDevice"
	IoTService_GetSensorReadingByDeviceID_FullMethodName = "/iot.IoTService/GetSensorReadingByDeviceID"
)

// IoTServiceClient is the client API for IoTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IoTServiceClient interface {
	GetAllDevice(ctx context.Context, in *GetAllDevicesRequest, opts ...grpc.CallOption) (*GetAllDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceByIDRequest, opts ...grpc.CallOption) (*GetDeviceByIDResponse, error)
	GetSensorReadingByDeviceID(ctx context.Context, in *GetSensorReadingByDeviceIDRequest, opts ...grpc.CallOption) (*GetSensorReadingByDeviceIDResponse, error)
}

type ioTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIoTServiceClient(cc grpc.ClientConnInterface) IoTServiceClient {
	return &ioTServiceClient{cc}
}

func (c *ioTServiceClient) GetAllDevice(ctx context.Context, in *GetAllDevicesRequest, opts ...grpc.CallOption) (*GetAllDevicesResponse, error) {
	out := new(GetAllDevicesResponse)
	err := c.cc.Invoke(ctx, IoTService_GetAllDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTServiceClient) GetDevice(ctx context.Context, in *GetDeviceByIDRequest, opts ...grpc.CallOption) (*GetDeviceByIDResponse, error) {
	out := new(GetDeviceByIDResponse)
	err := c.cc.Invoke(ctx, IoTService_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTServiceClient) GetSensorReadingByDeviceID(ctx context.Context, in *GetSensorReadingByDeviceIDRequest, opts ...grpc.CallOption) (*GetSensorReadingByDeviceIDResponse, error) {
	out := new(GetSensorReadingByDeviceIDResponse)
	err := c.cc.Invoke(ctx, IoTService_GetSensorReadingByDeviceID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IoTServiceServer is the server API for IoTService service.
// All implementations must embed UnimplementedIoTServiceServer
// for forward compatibility
type IoTServiceServer interface {
	GetAllDevice(context.Context, *GetAllDevicesRequest) (*GetAllDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceByIDRequest) (*GetDeviceByIDResponse, error)
	GetSensorReadingByDeviceID(context.Context, *GetSensorReadingByDeviceIDRequest) (*GetSensorReadingByDeviceIDResponse, error)
	mustEmbedUnimplementedIoTServiceServer()
}

// UnimplementedIoTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIoTServiceServer struct {
}

func (UnimplementedIoTServiceServer) GetAllDevice(context.Context, *GetAllDevicesRequest) (*GetAllDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDevice not implemented")
}
func (UnimplementedIoTServiceServer) GetDevice(context.Context, *GetDeviceByIDRequest) (*GetDeviceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedIoTServiceServer) GetSensorReadingByDeviceID(context.Context, *GetSensorReadingByDeviceIDRequest) (*GetSensorReadingByDeviceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorReadingByDeviceID not implemented")
}
func (UnimplementedIoTServiceServer) mustEmbedUnimplementedIoTServiceServer() {}

// UnsafeIoTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IoTServiceServer will
// result in compilation errors.
type UnsafeIoTServiceServer interface {
	mustEmbedUnimplementedIoTServiceServer()
}

func RegisterIoTServiceServer(s grpc.ServiceRegistrar, srv IoTServiceServer) {
	s.RegisterService(&IoTService_ServiceDesc, srv)
}

func _IoTService_GetAllDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTServiceServer).GetAllDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IoTService_GetAllDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTServiceServer).GetAllDevice(ctx, req.(*GetAllDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IoTService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTServiceServer).GetDevice(ctx, req.(*GetDeviceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTService_GetSensorReadingByDeviceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensorReadingByDeviceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTServiceServer).GetSensorReadingByDeviceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IoTService_GetSensorReadingByDeviceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTServiceServer).GetSensorReadingByDeviceID(ctx, req.(*GetSensorReadingByDeviceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IoTService_ServiceDesc is the grpc.ServiceDesc for IoTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IoTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.IoTService",
	HandlerType: (*IoTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDevice",
			Handler:    _IoTService_GetAllDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _IoTService_GetDevice_Handler,
		},
		{
			MethodName: "GetSensorReadingByDeviceID",
			Handler:    _IoTService_GetSensorReadingByDeviceID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/sensor.proto",
}
